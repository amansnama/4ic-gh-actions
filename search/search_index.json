{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CMSE 890-602 HW4","text":"<p>Documentation of example functions and my functions.</p>"},{"location":"#contents","title":"Contents","text":"<ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol>"},{"location":"#project-overview","title":"Project Overview","text":"<p>Some functions.</p> <p>Modules exported by this package:</p> <ul> <li><code>example_functions</code>: Example functions.</li> <li><code>my_functions</code>: My functions.</li> </ul>"},{"location":"explanation/","title":"Explanation","text":"<p>The package <code>some_functions</code> contain:</p> <ul> <li>example_functions.py</li> <li>my_functions.py</li> <li>test_example.py - contains tests for example_functions.py</li> <li>test_functions.py - contains tests for my_functions.py</li> </ul> <p>These functions and test files were created as an exercise to learn the unit test concept in Python using the <code>pytest</code> library. The unit testing topic is a part of the Michigan State University's Fall 2024 course CMSE 890-602 Reproducible Computational Workflows.</p> <p>This documentation served as an exercise to apply the Diataxis documentation format.</p>"},{"location":"how-to-guides/","title":"How-To Guides","text":""},{"location":"how-to-guides/#how-to-import-the-package-some_functions","title":"How to import the package 'some_functions'","text":"<p>If you have the entire package <code>some_functions</code> instead of the individual <code>.py</code> files, importing the package as a whole can be done.</p> <ol> <li>Ensure <code>some_functions</code> is in the project directory.</li> <li>Import the modules as: <code>from some_functions import example_functions, my_functions</code></li> <li>Run the functions in the modules:</li> </ol> <pre><code>&gt;&gt;&gt; example_functions.my_thermo_stat(75,69)\n'AC'\n&gt;&gt;&gt; my_functions.perimeter_of_rectangle(1.1, 5)\n12.2\n</code></pre>"},{"location":"how-to-guides/#how-to-import-if-some_functions-is-not-in-project-directory","title":"How to import if 'some_functions' is not in project directory","text":"<p>If <code>some_functions</code> is located outside the project directory, the import statement will not find the package and will raise an error. To import <code>some_functions</code> in this case, add the path to the package to the system path variable (it defines the import search path). Then import the modules. The Python code looks like:</p> <pre><code>import sys\nsys.path.insert(0, \"path/to/some_functions/\")\n\nfrom some_functions import example_functions, my_functions\n</code></pre> <p>Replace \"path/to/some_functions/\" in the above code snippet with the actual path to <code>some_functions</code>.</p> <p>Relevant stackoverflow: https://stackoverflow.com/questions/24868733/how-to-access-a-module-from-outside-your-file-folder-in-python</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#functions-in-example_functions","title":"Functions in example_functions","text":"<p>Defines three functions.</p> <p>All functions taken from \"Python Numerical Methods\", Kong, Siauw and Bayen https://pythonnumericalmethods.berkeley.edu/notebooks/Index.html</p> <ul> <li><code>my_adder(a,b,c)</code> - Returns sum of three numbers.</li> <li><code>my_thermo_stat(temp, desired_temp)</code> - Change status of thermostat.</li> <li><code>have_digits(s)</code> - Checks if string s has digits.</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from some_functions import example_functions\n&gt;&gt;&gt; example_functions.my_adder(1,2,3)\n6\n&gt;&gt;&gt; example_functions.my_thermo_stat(75,69)\n'AC'\n&gt;&gt;&gt; example_functions.have_digits('Jack123')\n1\n</code></pre>"},{"location":"reference/#some_functions.example_functions.have_digits","title":"<code>have_digits(s)</code>","text":"<p>Checks if string has digits.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>String to check</p> required <p>Returns:</p> Name Type Description <code>out</code> <code>int</code> <p>1 if s has digits and 0 if s has no digits</p> Source code in <code>some_functions/example_functions.py</code> <pre><code>def have_digits(s: str) -&gt; int:\n    \"\"\"Checks if string has digits.\n\n    Args:\n        s (str): String to check\n\n    Returns:\n        out: 1 if s has digits and 0 if s has no digits\n    \"\"\"\n\n    out = 0\n\n    # loop through the string\n    for c in s:\n        # check if the character is a digit\n        if c.isdigit():\n            out = 1\n            break\n\n    return out\n</code></pre>"},{"location":"reference/#some_functions.example_functions.my_adder","title":"<code>my_adder(a, b, c)</code>","text":"<p>Add three numbers.</p> <p>function to sum the 3 numbers</p> <p>Input: 3 numbers a, b, c</p> <p>Output: the sum of a, b, and c</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int | float</code> <p>Number 1</p> required <code>b</code> <code>int | float</code> <p>Number 2</p> required <code>c</code> <code>int | float</code> <p>Number 3</p> required <p>Returns:</p> Type Description <code>int | float</code> <p>The sum</p> Source code in <code>some_functions/example_functions.py</code> <pre><code>def my_adder(a: int | float, b: int | float, c: int | float) -&gt; int | float:\n    \"\"\"Add three numbers.\n\n    function to sum the 3 numbers\n\n    Input: 3 numbers a, b, c\n\n    Output: the sum of a, b, and c\n\n    Args:\n        a (int | float): Number 1\n        b (int | float): Number 2\n        c (int | float): Number 3\n\n    Returns:\n        The sum\n    \"\"\"\n    # this is the summation\n    out = a + b + c\n\n    return out\n</code></pre>"},{"location":"reference/#some_functions.example_functions.my_thermo_stat","title":"<code>my_thermo_stat(temp, desired_temp)</code>","text":"<p>Change thermostat setting.</p> <p>Changes the status of the thermostat based on  temperature and desired temperature</p> <p>Parameters:</p> Name Type Description Default <code>temp</code> <code>int | float</code> <p>Current temperature</p> required <code>desired_temp</code> <code>int | float</code> <p>Temperature to set to.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Status of thermostat</p> Source code in <code>some_functions/example_functions.py</code> <pre><code>def my_thermo_stat(temp: int | float, desired_temp: int | float) -&gt; str:\n    \"\"\"Change thermostat setting.\n\n    Changes the status of the thermostat based on \n    temperature and desired temperature\n\n    Args:\n        temp (int | float): Current temperature\n        desired_temp (int | float): Temperature to set to.\n\n    Returns:\n        str: Status of thermostat\n    \"\"\"\n    if temp &lt; desired_temp - 5:\n        status = 'Heat'\n    elif temp &gt; desired_temp + 5:\n        status = 'AC'\n    else:\n        status = 'off'\n    return status\n</code></pre>"},{"location":"reference/#functions-in-my_functions","title":"Functions in my_functions","text":"<p>Functions to calculate area and perimeter of a rectangle.</p> <p>Functions for examples_tests.py, renamed to test_example.py</p> <ul> <li><code>area_of_rectangle(width, height)</code> - Returns area.</li> <li><code>perimeter_of_rectangle(width, height)</code> - Returns perimeter.</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from some_functions import my_functions\n&gt;&gt;&gt; my_functions.area_of_rectangle(10,2)\n20\n&gt;&gt;&gt; my_functions.perimeter_of_rectangle(1.1, 5)\n12.2\n</code></pre>"},{"location":"reference/#some_functions.my_functions.area_of_rectangle","title":"<code>area_of_rectangle(width, height)</code>","text":"<p>Calculates area of rectangle.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int | float</code> <p>width of rectangle</p> required <code>height</code> <code>int | float</code> <p>height of rectangle</p> required <p>Returns:</p> Type Description <code>int | float</code> <p>area = width times height</p> Source code in <code>some_functions/my_functions.py</code> <pre><code>def area_of_rectangle(width: int | float, height: int | float) -&gt; int | float:\n    \"\"\"Calculates area of rectangle.\n\n    Args:\n        width (int | float): width of rectangle\n        height (int | float): height of rectangle\n\n    Returns:\n        area = width times height\n    \"\"\"\n    return width*height\n</code></pre>"},{"location":"reference/#some_functions.my_functions.perimeter_of_rectangle","title":"<code>perimeter_of_rectangle(width, height)</code>","text":"<p>Calculates perimeter of a rectangle</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int | float</code> <p>width of rectangle</p> required <code>height</code> <code>int | float</code> <p>height of rectangle</p> required <p>Returns:</p> Type Description <code>int | float</code> <p>perimeter = 2 * (width + height)</p> Source code in <code>some_functions/my_functions.py</code> <pre><code>def perimeter_of_rectangle(width: int | float, height: int | float) -&gt; int | float:\n    \"\"\"Calculates perimeter of a rectangle\n\n    Args:\n        width (int | float): width of rectangle\n        height (int | float): height of rectangle\n\n    Returns:\n        perimeter = 2 * (width + height)\n    \"\"\"\n    return 2*(width+height)\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>In this tutorial, we will import the module and learn to run the functions inside the module.</p>"},{"location":"tutorials/#importing-the-module","title":"Importing the module","text":"<ol> <li>Place the files in the same directory: Ensure that my_functions.py and example_functions.py are in the same directory as your main script or in the current working directory (if you are using Python interactively).</li> <li>Create a new python script.</li> <li>Import the functions at the top of the script.</li> </ol> <pre><code>import my_functions\nimport example_functions\n</code></pre> <p>We must always import the modules before using the functions within it.</p>"},{"location":"tutorials/#using-the-function","title":"Using the function","text":"<ol> <li>To use functions in my_functions, for example area_of_rectangle(): <code>area = my_functions.area_of_rectangle(width=5, height=4))</code></li> <li>Print the area: <code>print(\"The area of the rectangle is\", area)</code></li> <li>The output will be: <code>The area of the rectangle is 20</code></li> <li>Functions in example_functions can be called similarly.</li> </ol> <pre><code>&gt;&gt;&gt; example_functions.my_adder(1,2,3)\n6\n&gt;&gt;&gt; example_functions.have_digits(\"abc\")\n0\n</code></pre>"},{"location":"tutorials/#example-of-python-script","title":"Example of python script","text":"<p>A complete python script to import and run the functions will look like:</p> <pre><code># main.py\nimport my_functions\nimport example_functions\n\n# Sum three numbers.\nprint(\" Sum of 1, 2, and 3 =\", example_functions.my_adder(1,2,3))\n</code></pre> <p>Run the script with: <code>python main.py</code></p> <p>The output should look like <code>Sum of 1, 2, and 3 = 6</code></p>"}]}